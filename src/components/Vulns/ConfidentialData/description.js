import React, { Component } from "react";
import top_secret from '../../../images/top_secret.jpg'
import './confidentialData.css'

class Desc extends Component {
  render() {
    return (
      <div className="main">
        <img src={top_secret} alt="Конфиденциально"/>
        <h2>A3: Разглашение конфиденциальных данных</h2>
        <p>
          Многие веб-приложения и API имеют плохую защиту критичных финансовых,
          медицинских или персональных данных. Злоумышленники могут похитить или
          изменить эти данные, а затем осуществить мошеннические действия с
          кредитными картами или персональными данными. Конфиденциальные данные
          требуют дополнительных мер защиты, например их шифрования при хранении
          или передаче, а также специальных мер предосторожности при работе с
          браузером.
        </p>
        <p>
          Вместо взлома механизмов шифрования злоумышленники крадут ключи,
          проводят атаки по принципу "человек посередине" или получают данные в
          незашифрованном виде с сервера, в процессе их передачи или из клиента
          пользователя, например, браузера. Подобные атаки обычно проводятся
          вручную. Ранее полученные базы данных паролей могут быть взломаны
          методом подбора с использованием графических процессоров
        </p>
        <p>
          Прежде всего необходимо определить требуемый уровень защиты данных при
          их передаче и хранении. Например, пароли, номера кредитных карт,
          медицинские записи, персональные данные и коммерческие тайны требуют
          дополнительной защиты, особенно если они подпадают под действие закона
          о неприкосновенности данных (напр., Общего регламента ЕС по защите
          данных (GDPR)) или закона о защите финансовых данных (напр., Стандарта
          безопасности данных в сфере платежных карт (PCI DSS)). <br />•
          Шифруются ли передаваемые данные? Это касается протоколов передачи
          данных, таких как HTTP, SMTP и FTP. Особенно опасен внешний
          интернеттрафик. Проверьте весь внутренний трафик, например, между
          балансировщиками нагрузки, веб-серверами и внутренними системами.{" "}
          <br />• Шифруются ли хранилища критичных данных, а также резервные
          копии? <br />
          • Используются ли по умолчанию или в более ранних версиях устаревшие
          или ненадежные алгоритмы шифрования? <br />
          • Используются ли созданные по умолчанию, ненадежные или одинаковые
          шифроключи, а также применяются ли соответствующие механизмы контроля
          и смены ключей? <br />
          • Используется ли шифрование, например, присутствуют ли директивы
          безопасности пользовательских агентов (браузеров) и заголовки? <br />
          • Проверяет ли пользовательский агент (напр., приложение или почтовый
          клиент) действительность полученных сертификатов? <br />
          См. Стандарт подтверждения безопасности приложений:{" "}
          <a href="https://www.owasp.org/index.php/ASVS_V7_Cryptography">
            Криптография (V7)
          </a>
          ,
          <a href="https://www.owasp.org/index.php/ASVS_V9_Data_Protection">
            {" "}
            Защита данных (V9){" "}
          </a>{" "}
          и{" "}
          <a href="https://www.owasp.org/index.php/ASVS_V10_Communications">
            {" "}
            SSL/TLS (V10).
          </a>
        </p>
        <h2>Эксплуатация атаки</h2>
        <p>
          На странице эксплуатации нас ждет уже знакомый поиск по сотрудникам из
          категории A1: Инъекции. С помощью следующей инъекции мы может получить
          хэши паролей всех пользователей системы:
        </p>
        <pre class="prettyprint lang-sql">
            Andrey' UNION SELECT username, lastname, password FROM users WHERE '1' = '1
        </pre>
        <p>
          Далее мы можем попробовать расшифровать хэш, получив из него пароль,
          если для его создания использовалась слабая или стандартная
          хэш-функция.
        </p>
        <p>
          Для этого воспользуемся одним из многих сервисов, которые предлагают
          восстановить пароль по хэш-строке. Например,{" "}
          <a href="https://crackstation.net/">Crackstation</a>{" "}
        </p>
        <p>Попробуем восстановить хэш babc63d2509157e9ff8e108187ee47bb. Сервис с легкостью 
            выдает нам восстановленный пароль - Dog555. Как видим, в пароле 6 символом, заглавные
            и строчные символы, цифры. Это еще одно подтверждение тому, что пароль должен быть
            длинным и сложным, не менеее 10-12 символов, со вставкой специальных символов, а хэш
            должен формироваться с помощью стойких хэш-функций, а не встроенных утилит.
        </p>
      </div>
    );
  }
}

export default Desc;
