import React, { Component } from "react";

import pack from '../../../images/package.png'
import app from "../../../images/app.png"
import react_log from '../../../images/react_log.png'
import cookie from '../../../images/cookie.png'
import storage from '../../../images/storage.png'

class Exp extends Component {
    render() {
        return (
          <div className="main">
            <h2>У данной уязвимости есть несколько возможных векторов атаки</h2>
            <h3>Сценарий #1</h3>
            <p>
              Возьмем один из признаков уязвимости приложения из вкладки
              "описание": "Учетные записи и пароли, создаваемые по умолчанию,
              используются без изменений"
            </p>
            <p>
              Это самый очевидный вектор атаки - просто попробуем ввести учетные
              данные по умолчанию - нажмем в меню на кнопку входа и введем
              учетные данные: <b>admin/admin.</b> Все очень просто - вы вошли в
              приложение как администратор даже без взлома.
            </p>
            <h3>Сценарий #2</h3>
            <p>
              Если в приложении не настроены правильные разграничения, мы можем
              получить доступ к файлам на сервере из строки поиска. Попробуем
              ввести возможные названия файлов. Конечно, заранее знать мы их не
              можем, но обычно они называются однотипно и мы можем попробовать
              их угадать.
            </p>
            <p>
              Например, попробуем найти файл отладки - debug.log. Введем в
              строке поиска debug.log. (http://localhost:3000/debug.log).
              Отлично, мы видим лог отладки, уже можно сделать определенные
              выводы по приложению. Идем дальше, обычно в приложении есть файл
              package.json, попробуем найти и его
              (http://localhost:3000/package.json).
            </p>
            <img src={pack} />
            <p>
              В этот раз информация уже интересней - мы видим все модули,
              подключенные к приложению, это позволяет нам поискать в сети
              известные уязвимости каждого модуля/библиотеки и воспользоваться
              им. Также видим, что в качестве базы данных используется MySQL -
              неограниченное пространство для полета фантазии взломщика.
            </p>
            <p>
              Так же можем увидеть, что приложение создано на фреймворке React.
              Обычно один из главных файлов в этой библиотеке - это index.js или
              App.js. Поиск index.js нам ничего не дал, а вот если ввести App.js
              (http://localhost:3000/App.js), то можем увидеть уже часть
              исходного кода приложения, что очень опасно. Например, можем
              увидеть, по каким URL можно перейти на страницу администрирования
              и панель управления пользователями. Связанная с этим уязвимость -{" "}
              <b>A5: недостатки контроля доступом</b> - в данном приложении.
            </p>
            <img src={app} />
            <h3>Сценарий #3</h3>
            <p>
              Если не отключить логирование на продашн - сервере, то
              злоумышленник может увидеть трассировку стека при обработке ошибок
              и логи самого приложения. Например, попробуем осуществить вход в
              приложение с любыми данными и посмотреть логи. Для этого откроем
              инструменты разработчика (в Chome это Ctrl + Shift + I) и перейдем
              во вкладку "Console".
            </p>
            <p>
              Первое, на что стоит обратить внимание - это вывод ошибок. Мы
              видим, что это за фреймворк (в данном случае React) и можем
              сделать некоторые выводы об устройстве приложения.
            </p>
            <img src={react_log} />
            <p>
              Если продолжить исследовать консоль, можно увидеть объект
              AUTH_USER. Если его открыть, внутри окажется action и next state.
              Внутри action видим поля login и password, которые передаются при
              попытке аутентификации. Внутри next state можно увидеть поля
              isAuth, login, isAdmin. Даже не разбираясь в тонкостях приложения,
              можно догодаться, что данные поля используются при доступе к
              панели администрирования, особенно нас интересует поле isAdmin.
              Так как в консоли больше нет ничего интересного, попробуем
              поискать эти поля в другом месте.
            </p>
            <p>
              Инструменты разработчика Chrome - мощная вещь. Сейчас мы находимся
              на вкладке Console, но есть и другие интересные вкладки. Перейдем
              на вкладку Application, здесь в левой части мы можем посмотреть
              куки и локальное хранилище. Как видим, в Cookies и Session Storage
              ничего интересного нет.
            </p>
            <img src={cookie} />
            <p>
              Перейдем во вкладку LocalStorage. LocalStorage - это новая
              технология HTML5 для хранения данных пользователя в браузере. Это
              аналог Cookie. Исследуем поля LocalStorage.
            </p>
            <img src={storage} />
            <p>
              Видим знакомые нам поля isAdmin и isAuth. Скорее всего, эти поля
              используются как флаг для доступа к странице администрирования.
              Сейчас эти поля установлены как false. Установим isAdmin в
              значение "1" (двойной клик по значению поля), а поле isAuth
              в значение "true" и попробуем перейти на
              страницу администрирования. Обычно это страница <b>"/admin"</b>. В
              точку! Мы спокойно вошли в панель администрирования, даже не узнав
              учетные данные администратора. Вывод: никогда не хранине критичные
              данные пользователя в Cookie и LocalStorage.
            </p>
          </div>
        );
    }
}

export default Exp