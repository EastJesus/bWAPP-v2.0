import React, { Component } from "react";

class Defense extends Component {
  render() {

    const high = `if(!preg_match("/^[0-9a-z\_\.\-]+@([\-a-z0-9]+\.)+[a-z]{2,}$/i", $email))
        {
            echo 'INVALID Email Address!';
            return;
        }`;
    const php2 = `
        $username = mysql_real_escape_string($username, $ dbLink);
        `;

    const php3 = `
        // Отключить вывод ошибок
        error_reporting(0);`;

    const php4 = `
        $visitorDbLink = mysql_connect('host', 'general_user', 'general_user_pass');
        $adminDbLink = mysql_connect('host', 'admin_user', 'admin_pass');
        `;
        
    return (
      <div className="tab__inner">
        <h1>Способы защиты от SQL - инъекций</h1>
        <h3>Использование параметризованных запросов</h3>
        <p>
          Вместо того, чтобы подставлять значения SQL-заявлений напрямую,
          подставляйте их параметризованные значения
        </p>
        <pre class="prettyprint lang-php">
          $db_connection = new mysqli("localhost", "user", "pass", "db"); <br />
          $statement = $db_connection->prepare("SELECT * FROM customers WHERE id
          = ?");
          <br />
          $statement->bind_param("i", $id);
          <br />
          $statement->execute();
        </pre>
        <h3>Применение регулярных выражений</h3>
        <pre class="prettyprint lang-php">{high}</pre>
        <p>
          Регулярные выражения используются для того, чтобы привести входные
          данные к одному шаблону. Например, здесь мы проверяем email клиента на
          валидность и отвергаем возможность для SQL-инъекций.
        </p>
        <p>
          Также вы можете пользоваться встроенными функциями PHP is_array(),
          is_bool(), is_double(), is_float(), is_int(), is_integer() и другими,
          для проверки данных пользователя.
        </p>
        <h3>Использование функции блокировки</h3>
        <p>
          Используйте функцию mysql_real_escape_string() для обработки внешних
          данных.{" "}
        </p>
        <pre class="prettyprint lang-php">{php2}</pre>
        <p>
          Это очень мощная встроенная функция PHP, способная предотвратить
          SQL-инъекции в большинстве случаев. Вы можете попробовать внедрить
          SQL-код после использования mysql_real_escape_string() и тестировать
          на уязвимости. Эта функция отвергает множество умных методов атак,
          используемых злоумышленниками.
        </p>
        <h3>Отключение сообщений об ошибках</h3>
        <p>
          Прежде всего избегайте встроенной MySQL функции mysql_error(). Умный
          взломщик может угадать некоторые параметры базы данных из сообщения об
          ошибке, а иногда и увидеть параметры соединения. Используйте
          mysql_error() только на стадии разработки. Но убирайте ее, когда
          запускаете сайт на сервере. Также отключите отчеты об ошибках в PHP.
          Это делается одной строкой:
        </p>
        <pre class="prettyprint lang-php">{php3}</pre>
        <p>
          В результате, пользователь не узнает из сообщения об ошибке никакой
          важной информации, такой как, имя базы данных, имя таблицы, имя
          пользователя и других. Тем самым мы усложняем хакеру возможность
          узнать структуру SQL-запроса, используя различные инъекции.
        </p>
        <h3>Создайте менее привилегированного пользователя БД</h3>
        <p>
          В большинстве случаев, вы заметите, что посетителям не нужно удалять
          или обновлять информацию. Представим интернет-магазин. Пользователь
          может запросить данные (SELECT) или оставить заказ (INSERT). <br />
          Таким образом, лучше создать несколько различных пользователей. Для
          администратора предоставить все привилегии, а для обычного
          пользователя ограниченные. Пример соединения для различных
          пользователей:
        </p>
        <pre class="prettyprint lang-php">{php4}</pre>
        <p>
          Теперь можно использовать $visitorDbLink для регулирования доступа к
          базе данных для посетителей, и использовать $adminDbLink для доступа в
          качестве администратора.
        </p>
        <h3>Использование специальных библиотек</h3>
        <p>
          Для любого языка уже созданые специальные библиотеки, которые помогают
          защитить приложение от атак, автоматически используя встроенные
          функции. Например, для Node.js используется библиотека node-mysql,
          которая автоматически применяет экранирование символов и другие
          функции защиты от инъекций.
        </p>
      </div>
    );
  }
}

export default Defense;
