import React, { Component } from "react";

import xss from "../../../../images/xss.png";

class Description extends Component {
  render() {

    const html = `<h1 style="color: red !important; font-size: 50px; font-weight: bold">This site is been hacked</h1>`;

    return (
      <div className="vulnInner">

        <img src={xss} alt="" className="xss-image" />
        <h2>A7: Межсайтовый скриптинг (HTML)</h2>

        <p>
          {" "}
          XSS (межсайтовый скриптинг) – одна из разновидностей атак на
          веб-системы, которая подразумевает внедрение вредоносного кода на
          определенную страницу сайта и взаимодействие этого кода с удаленным
          сервером злоумышленников при открытии страницы пользователем.
        </p>

        <p>
          {" "}
          Термин с английского расшифровывается как Cross-Site Scripting, но при
          этом получил аббревиатуру XSS, чтобы не было путаницы с CSS (каскадные
          таблицы стилей).{" "}
        </p>

        <h2> Как работает межсайтовый скриптинг </h2>
        <p>
          {" "}
          Основная цель межсайтового скриптинга – кража cookies пользователей
          при помощи встроенного на сервере скрипта с дальнейшей выборкой
          необходимых данных и использованием их для последующих атак и взломов.
          Злоумышленник осуществляет атаку пользователей не напрямую, а с
          использованием уязвимостей веб-сайта, который посещают жертвы, и
          внедряет специальный JavaScript. В браузере у пользователей этот код
          отображается как единая часть сайта. При этом посещаемый ресурс по
          факту является соучастником XSS-атаки.{" "}
        </p>

        <p>
          {" "}
          Если сравнивать с SQL-инъекциями, то XSS безопасен для сервера, но
          несет угрозу для пользователей зараженного ресурса или страницы.
          Однако, если к злоумышленнику попадут cookies администратора, можно
          получить доступ к панели управления сайтом и его содержимому.{" "}
        </p>

        <h2> Методика атаки через XSS </h2>
        <p>
          {" "}
          Запуск вредоносного кода JavaScript возможен только в браузере жертвы,
          поэтому сайт, на который зайдет пользователь, должен иметь уязвимость
          к XSS. Для совершения атаки злоумышленник изначально проверяет ресурсы
          на наличие уязвимостей через XSS, используя автоматизированные скрипты
          или ручной режим поиска. Обычно это стандартные формы, которые могут
          отправлять и принимать запросы (комментарии, поиск, обратная связь).{" "}
        </p>

        <p>
          {" "}
          Проводится полный сбор страниц с формами ввода, и каждая сканируется
          на наличие уязвимостей. Например, у нас есть страница «Поиск» на
          сайте. Для проверки уязвимости XSS достаточно ввести запрос:{" "}
          <b>
            {" "}
            &lt;script&gt;alert("cookie: " + document.cookie)&lt;/script&gt;{" "}
          </b>{" "}
        </p>

        <p>
          {" "}
          Если на экране появится уведомление, значит вы обнаружили брешь в
          безопасности. В противном случае система отобразит вам страницу с
          результатами поиска. Основные популярные CMS уже давно лишились
          подобных проблем, но из-за возможности расширения функционала за счет
          модулей и плагинов, создаваемых сторонними разработчиками, шансы на
          использование уязвимостей XSS возрастают в разы, особенно в Joomla,
          DLE, Bitrix, Wordpress. Чаще всего XSS-уязвимости проверяются в
          браузере Internet Explorer.{" "}
        </p>

        <h2>Эксплуатация</h2>
        <p>
          Во второй вкладке данного приложения можно проэксплуатировать атаку
          XSS. Самый простой способ - это ввести в окно ввода произвольный HTML
          - код, таким образом на странице выведется сообщение с вашим
          форматированием.
          <pre class="prettyprint lang-js">{html}</pre>
        </p>
      </div>
    );
  }
}

export default Description;
